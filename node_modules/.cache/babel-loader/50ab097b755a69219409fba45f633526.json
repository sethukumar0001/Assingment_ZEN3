{"ast":null,"code":"import { createStore } from \"redux\";\nimport rootReducer from '../reducers/index';\nconst LOCAL_STORAGE_NAME = \"localData\";\n\nclass PersistedStore {\n  // Singleton property\n  // Accessor to the default instance of this class\n  static getDefaultStore() {\n    if (PersistedStore.DefaultStore === null) {\n      PersistedStore.DefaultStore = new PersistedStore();\n    }\n\n    return PersistedStore.DefaultStore;\n  } // Redux store\n\n\n  // When class instance is used, initialize the store\n  constructor() {\n    this._store = null;\n    this.initStore();\n  } // Initialization of Redux Store\n\n\n  initStore() {\n    this._store = createStore(rootReducer, PersistedStore.loadState());\n\n    this._store.subscribe(() => {\n      PersistedStore.saveState(this._store.getState());\n    });\n  } // Getter to access the Redux store\n\n\n  get store() {\n    return this._store;\n  } // Loading persisted state from localStorage, no need to access\n  // this method from the outside\n\n\n  static loadState() {\n    try {\n      let serializedState = localStorage.getItem(LOCAL_STORAGE_NAME);\n\n      if (serializedState === null) {\n        return PersistedStore.initialState();\n      }\n\n      return JSON.parse(serializedState);\n    } catch (err) {\n      return PersistedStore.initialState();\n    }\n  } // Saving persisted state to localStorage every time something\n  // changes in the Redux Store (This happens because of the subscribe() \n  // in the initStore-method). No need to access this method from the outside\n\n\n  static saveState(state) {\n    try {\n      let serializedState = JSON.stringify(state);\n      localStorage.setItem(LOCAL_STORAGE_NAME, serializedState);\n    } catch (err) {}\n  } // Return whatever you want your initial state to be\n\n\n  static initialState() {\n    return {};\n  }\n\n}\n\nPersistedStore.DefaultStore = null;\nexport default PersistedStore;","map":{"version":3,"sources":["/home/sethu/Videos/react_persistatestore_/src/store/store/PersistedStore.js"],"names":["createStore","rootReducer","LOCAL_STORAGE_NAME","PersistedStore","getDefaultStore","DefaultStore","constructor","_store","initStore","loadState","subscribe","saveState","getState","store","serializedState","localStorage","getItem","initialState","JSON","parse","err","state","stringify","setItem"],"mappings":"AAEA,SACIA,WADJ,QAES,OAFT;AAIE,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,kBAAkB,GAAG,WAA3B;;AAEA,MAAMC,cAAN,CAAqB;AAEnB;AAGA;AACA,SAAOC,eAAP,GAAyB;AACvB,QAAID,cAAc,CAACE,YAAf,KAAgC,IAApC,EAA0C;AACxCF,MAAAA,cAAc,CAACE,YAAf,GAA8B,IAAIF,cAAJ,EAA9B;AACD;;AAED,WAAOA,cAAc,CAACE,YAAtB;AACD,GAZkB,CAcnB;;;AAGA;AACAC,EAAAA,WAAW,GAAG;AAAA,SAHdC,MAGc,GAHL,IAGK;AACZ,SAAKC,SAAL;AACD,GApBkB,CAsBnB;;;AACAA,EAAAA,SAAS,GAAG;AACV,SAAKD,MAAL,GAAcP,WAAW,CAACC,WAAD,EAAcE,cAAc,CAACM,SAAf,EAAd,CAAzB;;AACA,SAAKF,MAAL,CAAYG,SAAZ,CAAsB,MAAM;AAC1BP,MAAAA,cAAc,CAACQ,SAAf,CAAyB,KAAKJ,MAAL,CAAYK,QAAZ,EAAzB;AACD,KAFD;AAGD,GA5BkB,CA8BnB;;;AACA,MAAIC,KAAJ,GAAY;AACV,WAAO,KAAKN,MAAZ;AACD,GAjCkB,CAmCnB;AACA;;;AACA,SAAOE,SAAP,GAAmB;AACjB,QAAI;AACF,UAAIK,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBd,kBAArB,CAAtB;;AAEA,UAAIY,eAAe,KAAK,IAAxB,EAA8B;AAC5B,eAAOX,cAAc,CAACc,YAAf,EAAP;AACD;;AAED,aAAOC,IAAI,CAACC,KAAL,CAAWL,eAAX,CAAP;AACD,KARD,CAQE,OAAOM,GAAP,EAAY;AACZ,aAAOjB,cAAc,CAACc,YAAf,EAAP;AACD;AACF,GAjDkB,CAmDnB;AACA;AACA;;;AACA,SAAON,SAAP,CAAiBU,KAAjB,EAAwB;AACtB,QAAI;AACF,UAAIP,eAAe,GAAGI,IAAI,CAACI,SAAL,CAAeD,KAAf,CAAtB;AACAN,MAAAA,YAAY,CAACQ,OAAb,CAAqBrB,kBAArB,EAAyCY,eAAzC;AACD,KAHD,CAGE,OAAOM,GAAP,EAAY,CAAE;AACjB,GA3DkB,CA6DnB;;;AACA,SAAOH,YAAP,GAAsB;AACpB,WAAO,EAAP;AACD;;AAhEkB;;AAAfd,c,CAGGE,Y,GAAe,I;AAgExB,eAAeF,cAAf","sourcesContent":["\n\nimport {\n    createStore\n  } from \"redux\";\n  \n  import rootReducer from '../reducers/index'\n  \n  const LOCAL_STORAGE_NAME = \"localData\";\n  \n  class PersistedStore {\n  \n    // Singleton property\n    static DefaultStore = null;\n  \n    // Accessor to the default instance of this class\n    static getDefaultStore() {\n      if (PersistedStore.DefaultStore === null) {\n        PersistedStore.DefaultStore = new PersistedStore();\n      }\n  \n      return PersistedStore.DefaultStore;\n    }\n  \n    // Redux store\n    _store = null;\n  \n    // When class instance is used, initialize the store\n    constructor() {\n      this.initStore()\n    }\n  \n    // Initialization of Redux Store\n    initStore() {\n      this._store = createStore(rootReducer, PersistedStore.loadState());\n      this._store.subscribe(() => {\n        PersistedStore.saveState(this._store.getState());\n      });\n    }\n  \n    // Getter to access the Redux store\n    get store() {\n      return this._store;\n    }\n  \n    // Loading persisted state from localStorage, no need to access\n    // this method from the outside\n    static loadState() {\n      try {\n        let serializedState = localStorage.getItem(LOCAL_STORAGE_NAME);\n  \n        if (serializedState === null) {\n          return PersistedStore.initialState();\n        }\n  \n        return JSON.parse(serializedState);\n      } catch (err) {\n        return PersistedStore.initialState();\n      }\n    }\n  \n    // Saving persisted state to localStorage every time something\n    // changes in the Redux Store (This happens because of the subscribe() \n    // in the initStore-method). No need to access this method from the outside\n    static saveState(state) {\n      try {\n        let serializedState = JSON.stringify(state);\n        localStorage.setItem(LOCAL_STORAGE_NAME, serializedState);\n      } catch (err) {}\n    }\n  \n    // Return whatever you want your initial state to be\n    static initialState() {\n      return {};\n    }\n  }\n  \n  export default PersistedStore;\n  "]},"metadata":{},"sourceType":"module"}